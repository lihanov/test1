#use ubuntu 20.04
---
- hosts: db_postgres
  become: yes
  pre_tasks:

    - name: "Install packages"
      apt: "name={{ item }} state=present update_cache=yes"
      with_items:
        - postgresql-12
        - postgresql-contrib
        - python3-psycopg2

    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/etc/postgresql/12/db2/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "pg_createcluster 12 db2"
      when: not postgres_data.stat.exists


  tasks:
   
    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name1 }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user1 }}"
        password: "{{ db_password1 }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name1 }}"
        roles: "{{ db_user1 }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/12/main/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user1 }}"
        address: 0.0.0.0/0
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: dump1.sql
        dest: /tmp/dump1.sql
        owner: root
        group: root
        mode: '0777'

    - name: "Add some dummy data to our database"
      become: true
      become_user: postgres
      shell: psql {{ db_name1 }} < /tmp/dump1.sql

    - name: Ensure PostgreSQL is listening on *
      lineinfile:
        dest: /etc/postgresql/12/main/postgresql.conf
        regexp: '^listen_addresses\s*='
        line: "listen_addresses='*'"
        state: present
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Ensure PostgreSQL is port to 5433
      lineinfile:
        dest: /etc/postgresql/12/main/postgresql.conf
        regexp: '^port\s*='
        line: "port='5433'"
        state: present
      become: yes
      become_user: postgres
      notify: restart postgres
    

    - name: Ensure PostgreSQL is listening on * to cluster db2
      lineinfile:
        dest: /etc/postgresql/12/db2/postgresql.conf
        regexp: '^listen_addresses\s*='
        line: "listen_addresses='*'"
        state: present
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Ensure PostgreSQL is port to 5432 to cluster db2
      lineinfile:
        dest: /etc/postgresql/12/db2/postgresql.conf
        regexp: '^port\s*='
        line: "port='5432'"
        state: present
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Flush handlers
      meta: flush_handlers


    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name2 }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user2 }}"
        password: "{{ db_password2 }}"
      become: yes
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name2 }}"
        roles: "{{ db_user2 }}"
        grant_option: no
        privs: all
      become: yes
      become_user: postgres

    - name: "Allow md5 connection for the db user"
      postgresql_pg_hba:
        dest: "/etc/postgresql/12/db2/pg_hba.conf"
        contype: host
        databases: all
        method: md5
        users: "{{ db_user2 }}"
        address: 0.0.0.0/0
        create: true
      become: yes
      become_user: postgres
      notify: restart postgres

    - name: Copy file with owner and permissions
      ansible.builtin.copy:
        src: dump2.sql
        dest: /tmp/dump2.sql
        owner: root
        group: root
        mode: '0777'

    - name: "Add some dummy data to our database"
      become: true
      become_user: postgres
      shell: psql {{ db_name2 }} < /tmp/dump2.sql



  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted

